package main

import (
	"encoding/binary"
	"encoding/hex"
	"fmt"
)

func main() {
	original := []byte{0xF5, 0xA2, 0xE2, 0x05, 0x0E, 0xEB, 0x95, 0x57, 0x2E, 0x7E, 0x1A, 0x62, 0x65, 0x8B, 0x36, 0xDE, 0x1F, 0xE1, 0x43, 0x8A, 0xE6, 0xDC, 0x69, 0xCA, 0x7D, 0x55, 0x7C, 0xD8, 0xE7, 0x78, 0xDF, 0xF0, 0xC3, 0xF4, 0x35, 0x66, 0xC9, 0x9A, 0x61, 0x32, 0x6D, 0x44, 0xA4, 0x22, 0x4D, 0xE2, 0x96, 0xA2, 0xA4, 0xE4, 0x8A, 0x1C, 0x85, 0x7A, 0x47, 0xC8, 0x5B, 0xC3, 0x5E, 0xFF, 0xE2, 0x4F, 0x18, 0xD7, 0x8C, 0x9F, 0x36, 0xA1, 0x0A, 0xDE, 0x67, 0x6A, 0x42, 0x7D, 0xF6, 0x80, 0x1E, 0xCE, 0xE1, 0x3C, 0x23, 0xBE, 0x36, 0x24, 0x16, 0x79, 0xA2, 0x63, 0xD7, 0xCC, 0x35, 0x34, 0x52, 0x16, 0x01, 0x54, 0xA2, 0xA7, 0xA5, 0xAA, 0x48, 0x66, 0xAC, 0x75, 0x6F, 0x66, 0x62, 0xD8, 0xCD, 0xAF, 0xE4, 0xF2, 0x35, 0xB5, 0xE7, 0x15, 0x9B, 0xB0, 0xA7, 0x26, 0x8B, 0xE0, 0x3D, 0x3D, 0x37, 0xF4, 0x26, 0x29, 0x9D, 0x77, 0x69, 0x4D, 0x88, 0x5D, 0x1A, 0x58, 0x25, 0x5A, 0xBF, 0x55, 0x35, 0x2B, 0x2B, 0x89, 0x80, 0x5A, 0x0A, 0xA3, 0x54, 0xA1, 0x72, 0xEF, 0x9B, 0xAF, 0xC4, 0x71, 0x55, 0x29, 0x47, 0xD8, 0x93, 0xE5, 0x03, 0xEE, 0x50, 0xBE, 0x2E, 0x2B, 0xE9, 0x9D, 0x1F, 0xC3, 0x9B, 0x6B, 0x1C, 0x3A, 0x57, 0xC6, 0xA0, 0x53, 0x12, 0x16, 0xAE, 0x34, 0xD2, 0x46, 0xA2, 0xEF, 0x2B, 0x40, 0x54, 0xB3, 0xC6, 0x11, 0x2D, 0xD6, 0xD4, 0x3F, 0xD1, 0x84, 0x21, 0xE1, 0xC4, 0x38, 0x2C, 0x2F, 0x7D, 0x61, 0xFA, 0x3D, 0x18, 0x2B, 0xFE, 0xFA, 0x79, 0x2C, 0xFD, 0x04, 0x78, 0x61, 0x7A, 0xD6, 0x89, 0x7A, 0xFA, 0xE1, 0xCA, 0xF7, 0x46, 0xE5, 0x89, 0x31, 0x27, 0x3D, 0x18, 0xF6, 0x02, 0x2A, 0x57, 0xC0, 0xC3, 0x5F, 0xE2, 0x6B, 0x61, 0x41, 0x09, 0x72, 0x63, 0xF5, 0x07, 0x54, 0x54, 0xDF, 0x8E, 0x18}
	// original := []byte{
	// 	//Magic 4 байта
	// 	0x41, 0xA4, 0x12, 0x21,

	// 	//ScriptName 70 байт
	// 	0x6B, 0x75, 0x63, 0x68, 0x65, 0x76, 0x61, 0x73, 0x6F, 0x76,
	// 	0x2E, 0x64, 0x2F, 0x72, 0x75, 0x6E, 0x43, 0x6D, 0x64, 0x00,
	// 	0x01, 0x00, 0x84, 0xFF, 0xEB, 0x01, 0x00, 0x0A, 0x0B, 0x0C,
	// 	0x0D, 0x0E, 0x0F, 0x01, 0x00, 0x02, 0x03, 0xFF, 0x10, 0xFF,
	// 	0x12, 0x13, 0x36, 0x35, 0x14, 0x0F, 0x5E, 0x00, 0x00, 0x00,
	// 	0x00, 0x80, 0xF7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44,
	// 	0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	// 	//ChunkNumber 4 байта
	// 	0x01, 0x00, 0x00, 0x00,

	// 	//PayloadSize 2 байта - здесь учитывается ScriptCrc + ScriptSize
	// 	0x10, 0x00,
	// 	//выше header

	// 	//ScriptCrc + ScriptSize 8 байт после encoding
	// 	0xBC, 0x7F, 0xDC, 0xCA, 0x60, 0xCD, 0x86, 0x8D,
	// 	0x6F, 0x9D, 0x4D, 0x3F, 0xD5, 0x2F, 0x80, 0x4C,

	// 	//Crc
	// 	0x00, 0x00}

	testKey := []byte{0xA2, 0x2B, 0xC3, 0x47, 0x65, 0x64, 0x56, 0x58, 0x51, 0x03, 0x03, 0x01, 0x05, 0x16, 0x07, 0xD8, 0x1F, 0x52, 0x33, 0x4A, 0x5A, 0x63, 0x79, 0x3E, 0x54, 0x76, 0x13, 0x54, 0x45, 0x36, 0x27, 0x28}
	block := make([]byte, 16)
	for i := 0; i < len(original)/16; i++ {
		block = decrypt(testKey, original[(i*16):((i+1)*16)], 32)
		fmt.Println(hex.Dump(block))
	}
}

func decrypt(key []byte, block []byte, rounds uint32) []byte {
	var k [8]uint32
	var i uint32
	end := make([]byte, 16)
	v0 := binary.LittleEndian.Uint32(block[:8])
	v1 := binary.LittleEndian.Uint32(block[8:])

	k[0] = binary.LittleEndian.Uint32(key[:8])
	k[1] = binary.LittleEndian.Uint32(key[8:16])
	k[2] = binary.LittleEndian.Uint32(key[16:24])
	k[3] = binary.LittleEndian.Uint32(key[24:])

	delta := binary.LittleEndian.Uint32([]byte{0xb9, 0x79, 0x37, 0x9e})
	mask := binary.LittleEndian.Uint32([]byte{0xff, 0xff, 0xff, 0xff})

	sum := (delta * rounds) & mask

	for i = 0; i < rounds; i++ {
		v1 = (v1 - (((v0<<4 ^ v0>>5) + v0) ^ (sum + k[sum>>11&3]))) & mask
		sum = (sum - delta) & mask
		v0 = (v0 - (((v1<<4 ^ v1>>5) + v1) ^ (sum + k[sum&3]))) & mask
	}

	binary.LittleEndian.PutUint32(end[:8], v0)
	binary.LittleEndian.PutUint32(end[8:], v1)

	return end
}
